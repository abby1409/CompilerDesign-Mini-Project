import javax.swing.JOptionPane;
import java.io.*;
import java.lang.*;


public class com extends javax.swing.JFrame 
{
    private String inputStatements = "";
    
    private double[][] setsRelationship = new double[100][100];                 //to store relationships between sets
    
    private int elementNo=0;
    private String [][] statementsList = new String[1000][2];
    private int tempCounter1=0;                                                   //counter for ICG
    private String [][] intermediateLanguageOutput = new String [1000][4];
    
    private String [][] finalArray = new String [1000][3];
    private String [][] tempArray1 = new String [1000][4];
   
    /**
     * Creates new form JFrame
     */
    public com() {
        initComponents();
        /*numberOfSubjects=0;
        numberOfInputs=0;
               
        if (!(readSetsRelationship("filename.txt","setfile.txt")))
                {
                JOptionPane.showMessageDialog(this,"Cannot read input file ","Error", JOptionPane.ERROR_MESSAGE);
                }*/
        jButton1.requestFocus();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(102, 102, 102));
        jTextArea1.setRows(5);
        jTextArea1.setText("Enter the statements here...");
        jTextArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextArea1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextArea1FocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton1.setFont(new java.awt.Font("Vijaya", 0, 30)); // NOI18N
        jButton1.setText("Convert");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Input");

        jLabel2.setFont(new java.awt.Font("Tempus Sans ITC", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Output");

        jLabel3.setFont(new java.awt.Font("Sylfaen", 0, 24)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Fuzzy Statements to Natural Language Converter");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(153, 153, 153))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(168, 168, 168))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(113, 113, 113))
            .addGroup(layout.createSequentialGroup()
                .addGap(305, 305, 305)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(62, 62, 62))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
 
    private String[][] lexicalAnalyser(String[][] statements)
    {
        int counter=0, startPos=0, c1=0, c2=0, c3=0, lineNo=1;               //'c1' is used as seperated statements counter
        inputStatements = jTextArea1.getText();                              //input recieved as a single statement
           
        inputStatements = inputStatements.replaceAll(" ", "");               //remove all white spaces
        inputStatements = inputStatements.replaceAll("\t", "");              



        int len = inputStatements.length();


        for (counter=0,c2=0; counter<len; counter++)
        {
                if(counter==len-1)                                            //Last delimiter reached
                {
                    statements[c1][c2] = inputStatements.substring(startPos,counter+1);
                    statements[c1][c2+1] = Integer.toString(lineNo);
                    statementsList[c1][c2] = inputStatements.substring(startPos,counter+1);
                    statementsList[c1][c2+1] = Integer.toString(lineNo);
                    
                    c1++;
                }
                else if(inputStatements.charAt(counter)==';')
                {
                    statements[c1][c2] = inputStatements.substring(startPos,counter+1);
                    statements[c1][c2+1] = Integer.toString(lineNo);
                    statementsList[c1][c2] = inputStatements.substring(startPos,counter+1);
                    statementsList[c1][c2+1] = Integer.toString(lineNo);
                    

                    c1++;
                    while(inputStatements.charAt(counter+1)=='\n')              //for removing extra new lines
                    {
                        counter++;      
                        lineNo++;                            
                    }
                    startPos = counter+1;                                       //set to begining of next statement                            
                }
                else if(inputStatements.charAt(counter) == '\n')
                {
                    statements[c1][c2] = inputStatements.substring(startPos,counter);
                    statements[c1][c2+1] = Integer.toString(lineNo);
                    statementsList[c1][c2] = inputStatements.substring(startPos,counter);
                    statementsList[c1][c2+1] = Integer.toString(lineNo);
                    
                    lineNo++;

                    c1++;
                    while(inputStatements.charAt(counter+1)=='\n')            //for removing extra new lines
                    {
                        counter++;
                        lineNo++;
                    }
                    startPos = counter+1;
                }
        }
        
        
        elementNo = c1;
        
        for(counter=0, c1=0; counter<elementNo; counter++)
        {
            statements[counter][c1] = statements[counter][c1].replaceAll("[a-z]+[a-z0-9]*[)]","NAMECLOBRACK");
            statements[counter][c1] = statements[counter][c1].replaceAll("([0-9]+)(([.]([0-9]+))?)","VALUE");
            statements[counter][c1] = statements[counter][c1].replaceAll("[m][(]","MKWDOPBRACK");
            statements[counter][c1] = statements[counter][c1].replaceAll("[e][l][s][e][i][f][(]","ELIKWDOPBRACK");
            statements[counter][c1] = statements[counter][c1].replaceAll("[i][f][(]","IFKWDOPBRACK");
            statements[counter][c1] = statements[counter][c1].replaceAll("[e][l][s][e]","ELSEKWD");
            statements[counter][c1] = statements[counter][c1].replaceAll("[(]", "OPBRACK");
            statements[counter][c1] = statements[counter][c1].replaceAll("[)]", "CLOBRACK");
            statements[counter][c1] = statements[counter][c1].replaceAll("([><][=]?)|(!|=)(=)", "RELOP");
            statements[counter][c1] = statements[counter][c1].replaceAll("[=]", "EQUAL");
            statements[counter][c1] = statements[counter][c1].replaceAll("[;]", "DELIM");        
            
        }
        
        return statements;
    }
    
    
    
    
    
    
    int syntaxAnalyser(String [][] array)
    {
        jTextArea2.setText("");
        int counter=0, c1=0, flag=0;
        boolean blockEnd=false;                                                 //flag is to check whether there is else after else if
        boolean error = false;                                                          //to check whether any error has occured or not.
        String outputString ;
        String m = "MKWD";
        String ob = "OPBRACK";
        String name = "NAME";
        String cb = "CLOBRACK";
        String eq = "EQUAL";
        String val = "VALUE";
        String rel = "RELOP";
        String i = "IFKWD";
        String elif = "ELIKWD";
        String e = "ELSEKWD";
        String d = "DELIM";
        
        String regexStatement = m+ob+name+cb+ob+name+cb+eq+val;
        String regexCondition = m+ob+name+cb+ob+name+cb+rel+val;
        String normalInput = regexStatement + d;
        String elseSyntax = e + "((" + regexStatement + ")*)";
        String elseIfSyntax = elif+ob+ regexCondition + cb+ "((" + regexStatement + ")*)";
        String ifSyntax = i+ob + regexCondition + cb+ "((" + regexStatement + ")*)";
        String iteSyntax = ifSyntax + "((" + elseIfSyntax + ")*)" + "((" + elseSyntax + ")?)";
        String ite = "(" + iteSyntax + d + ")" + "(((" + normalInput + ")" + "|" + "(" + iteSyntax + d + "))*)";
        
       
        String start = "(((" + normalInput + ")+)" + "((" + ite + ")*))" + "|" + "((" + ite + ")+)";
     
        String tempString = "";
        for(counter=0; counter<elementNo; counter++)
        {
            flag=0;
            blockEnd = false;
    
            while((counter < elementNo) && (array[counter][c1].matches(regexStatement + "(" + d + ")?")))            //it is a normal input
            {
                if(array[counter][c1].endsWith("DELIM"))
                {        
                    tempString = tempString + array[counter][c1];
                    counter++;
                }
                else
                {
                    outputString = jTextArea2.getText();
                    outputString += ("Error in line " + array[counter][c1+1] + "\n");
                    jTextArea2.setText(outputString);
                    tempString = tempString + array[counter][c1];
                    counter++;
                    error = true;
                }
            }
            
            if((counter < elementNo) && (array[counter][c1].matches(iteSyntax + "(" + d + ")?")))
            {
                while(!blockEnd)
                {
                   
                    if((counter < elementNo) && (!(array[counter][c1].contains("DELIM"))))                     //IF block has not ended (no delimiter).
                    {
                        tempString = tempString + array[counter][c1];

                        counter++;
                        while((counter<elementNo) && (array[counter][c1].matches(regexStatement)))      //check for normal input
                        {
                            tempString = tempString + array[counter][c1];
                            counter++;
                        }
                        if((counter<elementNo) && (array[counter][c1].matches(normalInput)))             //IF block ends
                        {
                            tempString = tempString + array[counter][c1];
                            flag=2;
                            blockEnd = true;
                        }
                        if(flag!=2)
                        {
                            if((counter<elementNo) && (array[counter][c1].matches(elseIfSyntax + "(" + d + ")?")))
                            {
                                while((counter<elementNo) && (array[counter][c1].matches(elseIfSyntax + "(" + d + ")?")))
                                {
                                    
                                    if((counter<elementNo) && (!(array[counter][c1].contains("DELIM"))))                 //ELSE IF block has not ended (no delimiter).
                                    {
                                        tempString = tempString + array[counter][c1];
                                        counter++;
                                        while((counter<elementNo) && (array[counter][c1].matches(regexStatement)))
                                        {
                                            tempString = tempString + array[counter][c1];
                                            counter++;
                                        }
                                        if((counter<elementNo) && (array[counter][c1].matches(normalInput)))
                                        {
                                            tempString = tempString + array[counter][c1];
                                            
                                            flag = 1;
                                            blockEnd = true;
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        tempString = tempString + array[counter][c1];
                                       
                                        flag=1;
                                        blockEnd = true;
                                        break;    
                                    }
                                }
                                if(flag!=1)
                                {
                                      
                                   
                                    if((counter<elementNo) && (array[counter][c1].matches(elseSyntax + "(" + d + ")?")))
                                    {
                                        while(counter<elementNo)                    //Control will come out of else only if it ends with a delimiter
                                        {  
                                        if((counter<elementNo) && (!(array[counter][c1].contains("DELIM"))))
                                        {
                                         
                                            counter++;
                                            tempString = tempString + array[counter][c1];
                                            while((counter<elementNo) && (array[counter][c1].matches(regexStatement)))
                                            {
                                                tempString = tempString + array[counter][c1];
                                                counter++;
                                            }
                                            if((counter<elementNo) && (array[counter][c1].matches(normalInput)))
                                            {
                                                tempString = tempString + array[counter][c1];

                                                blockEnd = true;
                                                break;
                                            }
                                            else if((counter<elementNo) && (array[counter][c1].contains("IFKWD")))
                                            {
                                                outputString = jTextArea2.getText();
                                                outputString += ("Error in line " + array[counter][c1+1]);
                                                jTextArea2.setText(outputString);
                                                error = true;
                                                break;
                                            }
                                            else
                                            {
                                                outputString = jTextArea2.getText();
                                                outputString += ("Error in line " + array[counter][c1+1] + "\n");
                                                jTextArea2.setText(outputString);
                                                error = true;
                                            }
                                           
                                        }
                                        else
                                        {
                                            blockEnd = true;
                                            break;
                                        }
                                    }
                                        
                                }
                                else
                                    {
                                        outputString = jTextArea2.getText();
                                        outputString += ("Error in line " + array[counter][c1+1] + "\n");
                                        jTextArea2.setText(outputString);
                                        blockEnd = true;
                                        error = true;
                                        break;
                                    }
                                }
                            }
                            else if((counter<elementNo) && (array[counter][c1].matches(elseSyntax + "(" + d + ")?")))
                            {
                                if((counter<elementNo) && (!(array[counter][c1].contains("DELIM"))))
                                {
                                    counter++;
                                    tempString = tempString + array[counter][c1];
                                    while((counter<elementNo) && (array[counter][c1].matches(regexStatement)))
                                    {
                                        tempString = tempString + array[counter][c1];
                                        counter++;
                                    }
                                    if((counter<elementNo) && (array[counter][c1].matches(normalInput)))
                                    {
                                        tempString = tempString + array[counter][c1];
                                        
                                    }
                                    else if((counter<elementNo) && (array[counter][c1].contains("IFKWD")))
                                    {
                                        outputString = jTextArea2.getText();
                                        outputString += ("Error in line " + array[counter][c1+1] + "\n");
                                        jTextArea2.setText(outputString);
                                        error = true;
                                    }
                                    else
                                    {
                                     if(counter==elementNo)
                                     {
                                        
                                        outputString = jTextArea2.getText();
                                        outputString += ("Error in line " + array[counter-1][c1+1] + "\n");
                                        jTextArea2.setText(outputString);
                                        error = true;
                                     }
                                        blockEnd = true;
                                        break;
                                    }
                                }
                                
                            }
                            else
                                {
                                    System.out.println("here");
                                    outputString = jTextArea2.getText();
                                    outputString += ("Error in line " + array[counter][c1+1] + "\n");
                                    jTextArea2.setText(outputString);
                                    error = true;
                                    if(array[counter][c1].contains(";"));
                                        blockEnd = true;
                                    
                                }
                         
                        }
                        else
                        {
                            blockEnd = true;
                        }


                    }
                    else
                    {
                        blockEnd = true;
                    }
                }
            }
            else if(counter<elementNo)
            {
                outputString = jTextArea2.getText();
                outputString += ("Error in line " + array[counter][c1+1] + "\n");
                jTextArea2.setText(outputString);
                error = true;
                
            }
            
        }
        if(error)
        {
            return 1;
        }
        else
            return 0;
        
    }

    
    private boolean semantic(String[][] statementList, int elementNo)
    {
        String outputString="";
        //jTextArea2.setText("");
        boolean error=false;
        String[][] table = new String[20][3];
        String[][][] localTable= new String[20][20][3];
        int blockCounter=0;
        int[] noOfStatementsInBlock= new int[20];
        //int elementNo=8;
        int r=1,c=0, tableCounter2=0, defined, validInput;
        int tableSize=1;
        //String [][] statementList= {{"m(a)(b)=0.2;", "1"}, { "m(x)(b)=1.0;", "2"}, {"m(a)(c)=0.5;", "2"}, { "if(m(a)(b)>0.2)","3" }, {"m(e)(f)=0.6237m(g)(h)=0.444","4"}, {"elseif(m(a)(b)<0.2)m(l)(m)=0.34m(e)(f)=1", "5"}, {"elsem(a)(b)=0.2m(h)(i)=0.78;", "5"}, {"m(l)(b)=0.2;", "6"}};
        for(int counter=0; counter< elementNo; counter++)
        {
            if(statementList[counter][0].charAt(0)== 'm')
            {
                c=0;
                validInput=0;
                defined=0;
                String temp_set="";
                String temp_subject="";
                String temp_value="";
                temp_set=statementList[counter][0].substring(statementList[counter][0].indexOf("(")+1, statementList[counter][0].indexOf(")"));
                temp_subject=statementList[counter][0].substring(statementList[counter][0].lastIndexOf("(")+1, statementList[counter][0].lastIndexOf(")"));
                temp_value=statementList[counter][0].substring(statementList[counter][0].indexOf("=")+1, statementList[counter][0].indexOf(";"));                
                
                if(Float.parseFloat(temp_value)>=0.0 && Float.parseFloat(temp_value)<=1.00)
                    validInput=1;
                
                if(validInput==1)
                {    
                if(table[0][0]==null)
                {
                    table[0][0]=temp_set;
                    table[0][1]=temp_subject;
                    table[0][2]=temp_value;   
                }
                else                
                {
                    //System.out.println();
                    for(int tableCounter1=0; tableCounter1<tableSize ; tableCounter1++ )
                    {
                            if(table[tableCounter1][0].equals(temp_set) && table[tableCounter1][1].equals(temp_subject) /*&& table[tableCounter1][2].equals(temp_value)*/)
                            {
                                defined=1;
                                outputString = jTextArea2.getText();
                                //System.out.println("Error in line "+statementList[counter][1]+": Duplicate values");
                                outputString += ("Error in line " + statementList[counter][1] + ": Duplicate values\n");
                                jTextArea2.setText(outputString);
                                error=true;
                            }

                    }
                    if(defined!=1)
                    {                          
                          table[r][c++]=temp_set;
                          table[r][c++]=temp_subject;
                          table[r++][c]=temp_value;
                          tableSize++;
                             
                    }
                }

                }
                else
                {
                    //System.out.println("Error in line "+ statementList[counter][1]+": Value must lie between 0 & 1");
                    outputString = jTextArea2.getText();
                    outputString += ("Error in line " + statementList[counter][1] + ": Values must lie between 0 & 1\n");
                    jTextArea2.setText(outputString);
                    error=true;
                }    
            }
            else if(statementList[counter][0].charAt(0)== 'i')
            {
                int[] endOfIf= new int[2];          //Position of end of if in the statementList>>[row, column]
                int[] endOfBlock= new int[2];
                int[] elseIndex= new int[2];
                int delimiterFound=0, blockEndIndex, semiIndex, flag=0, flag1=0;
                String ifSet="";
                String ifSubject="";
                String ifValue="";
                
                int setEnd=statementList[counter][0].indexOf(")");
                int subjectEnd=statementList[counter][0].indexOf(")",setEnd+1);
                int valueStart;
                if(statementList[counter][0].charAt(subjectEnd+2)>=48 && statementList[counter][0].charAt(subjectEnd+2)<=57 )
                {
                    valueStart=subjectEnd+2;
                }
                else valueStart=subjectEnd+3;
                int valueEnd=statementList[counter][0].indexOf(")", valueStart);
                ifSet=statementList[counter][0].substring(statementList[counter][0].indexOf("(")+3, statementList[counter][0].indexOf(")"));
                ifSubject=statementList[counter][0].substring(setEnd+2, subjectEnd);
                ifValue=statementList[counter][0].substring(valueStart, statementList[counter][0].indexOf(")", valueStart));
                //MATCH if condition from global table
                for(int tableCounter1=0; tableCounter1<tableSize ; tableCounter1++ )
                    {
                            if(table[tableCounter1][0].equals(ifSet) && table[tableCounter1][1].equals(ifSubject) /*&& table[tableCounter1][2].equals(temp_value)*/)
                            {
                                flag=1;
                            }
                    }
                if(flag!=1)
                {
                    //System.out.println("Error in line "+statementList[counter][1]+": Set and subject value is not defined");
                    outputString = jTextArea2.getText();
                    outputString += ("Error in line " + statementList[counter][1] + ": Set and subject value is not defined\n");
                    jTextArea2.setText(outputString);
                    error=true;
                }

                int tempCounter=counter;
                for(int tableCounter=tempCounter; (tableCounter<elementNo && delimiterFound==0); tableCounter++)  //to find the position of ;
                {
                    String temp=statementList[tableCounter][0];
                    for(int i=0;(i<temp.length() && delimiterFound==0);i++)   //can replace by while(temp.indexOf(";")==-1)
                    {
                        if(temp.charAt(i)==';')
                        {
                            endOfIf[0]=tableCounter;
                            endOfIf[1]=i;
                            delimiterFound=1;
                        }
                           
                    }
                    
                }                
                boolean endOfLoop=false;
                int col=valueEnd+1;
                for(int i=tempCounter; (i<= endOfIf[0] && endOfLoop==false) ; i++) //loop to seperate blocks into the local table
                {
                    int jump = 0;
                    while(col != -1 && endOfLoop==false)
                    {
                        col+=jump;
                        if(col>=statementList[i][0].length())
                            col=-1;
                        else if(statementList[i][0].charAt(col)=='e')
                        {
                            
                            if((statementList[i][0].length()>col+4)&&(statementList[i][0].charAt(col+4)=='i'))
                            {
                                //process
                                int tempcol=statementList[i][0].indexOf("m", col);
                                setEnd=statementList[i][0].indexOf(")", tempcol);
                                subjectEnd=statementList[i][0].indexOf(")",setEnd+1);
                                int lastBracket=statementList[i][0].indexOf(")", subjectEnd+1);
                                ifSet=statementList[i][0].substring(tempcol+2, setEnd);
                                ifSubject=statementList[i][0].substring(setEnd+2, subjectEnd);
                                //ifValue=statementList[i][0].substring(valueStart, statementList[i][0].indexOf(")", valueStart));
                                for(int tableCounter1=0; tableCounter1<tableSize ; tableCounter1++ )
                                {
                                    if(table[tableCounter1][0].equals(ifSet) && table[tableCounter1][1].equals(ifSubject) /*&& table[tableCounter1][2].equals(temp_value)*/)
                                    {
                                     flag1=1;
                                    }

                                }
                                if(flag1!=1)
                                {
                                    //System.out.println("Error in line "+statementList[i][1]+": Set and subject value is not defined");
                                    outputString = jTextArea2.getText();
                                    outputString += ("Error in line " + statementList[i][1] + ": Set and subject value is not defined\n");
                                    jTextArea2.setText(outputString);
                                    error=true;
                                }
                                
                                jump=lastBracket+1-col;
                                
                            }
                            else
                            {
                                jump=4;
                            }
                            blockCounter++;
                            
                        }
                        else if(statementList[i][0].charAt(col)=='m')
                        {
                            String localSet=statementList[i][0].substring(statementList[i][0].indexOf("(",col)+1, statementList[i][0].indexOf(")",col));
                            setEnd=statementList[i][0].indexOf(")",col);
                            subjectEnd=statementList[i][0].indexOf(")", setEnd+1);
                            String localSubject=statementList[i][0].substring(setEnd+2, subjectEnd);

                            
                            //find jump now
                            int pos1=statementList[i][0].indexOf(";", subjectEnd);
                            int pos2=statementList[i][0].indexOf("m", subjectEnd);
                            int pos3=statementList[i][0].indexOf("e", subjectEnd);
                            int pos4=Math.min(pos1,pos2);
                            if(pos4==(-1))
                                pos4=Math.max(pos1,pos2);
                            int fpos= Math.min(pos4,pos3);
                            if(fpos==(-1))
                            {
                                fpos=Math.max(pos4,pos3);
                                if(fpos==(-1))
                                {
                                    fpos=statementList[i][0].length();
                                }
                            }
                            String localValue=statementList[i][0].substring(statementList[i][0].indexOf("=",subjectEnd)+1, fpos);
                            if(!(Float.parseFloat(localValue)>=0 && Float.parseFloat(localValue)<=1))
                            {
                                //System.out.println("Error in line "+statementList[i][1]+": Value must lie between 0 & 1" );
                                outputString = jTextArea2.getText();
                                outputString += ("Error in line " + statementList[i][1] + ": Value must lie between 0 & 1\n");
                                jTextArea2.setText(outputString);
                                error=true;
                            }
                            else
                            {
                                localTable[blockCounter][noOfStatementsInBlock[blockCounter]][0]=localSet;
                                localTable[blockCounter][noOfStatementsInBlock[blockCounter]][1]=localSubject;
                                localTable[blockCounter][noOfStatementsInBlock[blockCounter]++][2]=localValue;
                            }    
                                jump=fpos-col;
                            
                            
                        }
                        else if(statementList[i][0].charAt(col)==';')
                        {
                            jump=0;
                            endOfLoop=true; 
                            blockCounter++;
                        }
                    
                    
                    }
                    col=0;
                }
                
                counter=endOfIf[0];
            }
            
            
        }
  
//        System.out.println("Printing the global table:");
//            for(int i=0; i<3; i++)
//            {
//                for(int j=0; j<3; j++)
//                {
//                    System.out.print(table[i][j]+"  ");
//                  
//                }
//                  System.out.println();
//            }
//            
//       System.out.println("Now printing the Local table:");
//            for(int j=0;j<2;j++)
//            {
//                for(int k=0;k<3; k++)
//                {
//                    System.out.print(localTable[1][j][k]);
//                }
//                System.out.println();
//            }
     
        
        return error;
        
    }

    
    
    
    
    
    private String[][] intermediateCodeGenerator(String [][] refArray)
    {
        int counter=0, c1=0;
        int posOpbrack1, posClobrack1, posOpbrack2, posClobrack2, posTemp1, posTemp2;
        int pos1,pos2,pos3,pos4,fpos, len;
        boolean flag=false, ifFlag=false;
        String set,sub, value, operator, temp;
        String [][] newArray = new String [100][4];
        for(counter=0, c1=0; counter<elementNo; counter++)
        {
            flag=false;
            if((refArray[counter][c1].startsWith("m")) && (ifFlag!=true))
            {
                len = refArray[counter][c1].length();
                posOpbrack1 = refArray[counter][c1].indexOf("(");
                posClobrack1 = refArray[counter][c1].indexOf(")");
                set = refArray[counter][c1].substring(posOpbrack1+1, posClobrack1);

                
                posOpbrack2 = refArray[counter][c1].indexOf("(", posClobrack1);
                posClobrack2 = refArray[counter][c1].indexOf(")", posOpbrack2);
                sub = refArray[counter][c1].substring(posOpbrack2+1, posClobrack2);
                
                posTemp1 = refArray[counter][c1].indexOf(";", posClobrack2);
                value = refArray[counter][c1].substring(posClobrack2+2, posTemp1);
                
                newArray[tempCounter1][0] = set;
                newArray[tempCounter1][1] = sub;
                newArray[tempCounter1][2] = value;
                tempCounter1++;
            }
            else if((refArray[counter][c1].startsWith("m")) && (ifFlag!=false))
            {
                len = refArray[counter][c1].length();
                posOpbrack1 = refArray[counter][c1].indexOf("(");
                posClobrack1 = refArray[counter][c1].indexOf(")", posOpbrack1);
                set = refArray[counter][c1].substring(posOpbrack1+1, posClobrack1);


                posOpbrack2 = refArray[counter][c1].indexOf("(", posClobrack1);
                posClobrack2 = refArray[counter][c1].indexOf(")", posOpbrack2);
                sub = refArray[counter][c1].substring(posOpbrack2+1, posClobrack2);

                pos1 = refArray[counter][c1].indexOf(";", posClobrack2);
                pos2 = refArray[counter][c1].indexOf("m", posClobrack2);
                pos3 = refArray[counter][c1].indexOf("e", posClobrack2);
                pos4 = Math.min(pos1,pos2);
                if(pos4==(-1))
                    pos4 = Math.max(pos1, pos2);

                fpos = Math.min(pos4,pos3);
                if(fpos==(-1))
                {
                    fpos = Math.max(pos4, pos3);
                    if(fpos!=(-1))
                    {
                        value = refArray[counter][c1].substring(posClobrack2+2, fpos);
                        posClobrack2 = fpos;                                    //if there again exists a term in the same line
                    }
                    else
                    {
                        flag=true;
                        fpos = len;
                        value = refArray[counter][c1].substring(posClobrack2+2, fpos);

                    }
                }
                else
                {
                    value = refArray[counter][c1].substring(posClobrack2+2, fpos);
                    posClobrack2 = fpos;                                    //if there again exists a term in the same line

                }

                newArray[tempCounter1][0] = set;
                newArray[tempCounter1][1] = sub;
                newArray[tempCounter1][2] = value;

                tempCounter1++;
                
                //position of content afterwards
                while((!flag) && (posClobrack2<len))
                {
            
                    if(refArray[counter][c1].charAt(posClobrack2)=='m')
                    {
      
                        posOpbrack1 = refArray[counter][c1].indexOf("(", posClobrack2);
                        posClobrack1 = refArray[counter][c1].indexOf(")", posOpbrack1);
                        set = refArray[counter][c1].substring(posOpbrack1+1, posClobrack1);


                        posOpbrack2 = refArray[counter][c1].indexOf("(", posClobrack1);
                        posClobrack2 = refArray[counter][c1].indexOf(")", posOpbrack2);
                        sub = refArray[counter][c1].substring(posOpbrack2+1, posClobrack2);

                        pos1 = refArray[counter][c1].indexOf(";", posClobrack2);
                        pos2 = refArray[counter][c1].indexOf("m", posClobrack2);
                        pos3 = refArray[counter][c1].indexOf("e", posClobrack2);
                        pos4 = Math.min(pos1,pos2);
                        if(pos4==(-1))
                            pos4 = Math.max(pos1, pos2);
                        
                        fpos = Math.min(pos4,pos3);
                        if(fpos==(-1))
                        {
                            fpos = Math.max(pos4, pos3);
                            if(fpos!=(-1))
                            {
                                value = refArray[counter][c1].substring(posClobrack2+2, fpos);
                                posClobrack2 = fpos;                                    //if there again exists a term in the same line
                            }
                            else
                            {
                                flag=true;
                                fpos = len;
                                value = refArray[counter][c1].substring(posClobrack2+2, fpos);

                            }
                        }
                        else
                        {
                            value = refArray[counter][c1].substring(posClobrack2+2, fpos);
                            posClobrack2 = fpos;                                    //if there again exists a term in the same line

                        }
                        
                        newArray[tempCounter1][0] = set;
                        newArray[tempCounter1][1] = sub;
                        newArray[tempCounter1][2] = value;
                        
                        tempCounter1++;
                    }
                    else if(refArray[counter][c1].charAt(posClobrack2)==';')
                    {
                        
                        newArray[tempCounter1][0]="end";
                        tempCounter1++;
                        
                        flag=true;
                        ifFlag=false;
                    }
                    else if(refArray[counter][c1].charAt(posClobrack2)=='e')
                    {
                        if(((posClobrack2+6)<len) && (refArray[counter][c1].substring(posClobrack2, posClobrack2+6).equals("elseif")))
                        {
                            posOpbrack2 = refArray[counter][c1].indexOf("(", posClobrack2);                           //position of else if(
                            posOpbrack1 = refArray[counter][c1].indexOf("(", posOpbrack2+1);            //position of m(
                            posClobrack1 = refArray[counter][c1].indexOf(")", posOpbrack1);
                            set = refArray[counter][c1].substring(posOpbrack1+1, posClobrack1);


                            posOpbrack2 = refArray[counter][c1].indexOf("(", posClobrack1);
                            posClobrack2 = refArray[counter][c1].indexOf(")", posOpbrack2);
                            sub = refArray[counter][c1].substring(posOpbrack2+1, posClobrack2);
                        
                        
                            posTemp1 = posClobrack2;                                            //position of m()( ")" == 0.3
                            posClobrack2 = refArray[counter][c1].indexOf(")", posTemp1+1);      //position of if( ")"
                            posTemp2 = posTemp1+2;

                            if(!((refArray[counter][c1].charAt(posTemp2)>=48) && (refArray[counter][c1].charAt(posTemp2)<=57)))       //an integer
                                posTemp2++;

                            operator = refArray[counter][c1].substring(posTemp1+1, posTemp2);
                            value = refArray[counter][c1].substring(posTemp2, posClobrack2);
                        

                            posClobrack2 = posClobrack2 + 1;
                            
                            newArray[tempCounter1][0] = set;
                            newArray[tempCounter1][1] = sub;
                            newArray[tempCounter1][2] = value;
                            newArray[tempCounter1][3] = operator;
                            tempCounter1++;
                         
                        }
                        else
                        {
                            posClobrack2 = posClobrack2 + 4;                    //to check after else
                        
                            newArray[tempCounter1][0] = "else";
                            tempCounter1++;
                        }
                    }
                    else
                    {
                        flag=true;                                              //nothing in the same line
                    }
                }
            }
            
            else if(refArray[counter][c1].startsWith("if"))
            {   
                ifFlag = true;
                len = refArray[counter][c1].length();
                
                //position of the condition in IF
                posOpbrack2 = refArray[counter][c1].indexOf("(");                   //position of if(
                posOpbrack1 = refArray[counter][c1].indexOf("(", posOpbrack2+1);     //position of m(
                posClobrack1 = refArray[counter][c1].indexOf(")");
                set = refArray[counter][c1].substring(posOpbrack1+1, posClobrack1);
                
                
                posOpbrack2 = refArray[counter][c1].indexOf("(", posClobrack1);
                posClobrack2 = refArray[counter][c1].indexOf(")", posOpbrack2);
                sub = refArray[counter][c1].substring(posOpbrack2+1, posClobrack2);

                posTemp1 = posClobrack2;                                            //position of m()( ")" == 0.3
                posClobrack2 = refArray[counter][c1].indexOf(")", posTemp1+1);      //position of if( ")"
                posTemp2 = posTemp1+2;
                
                if(!((refArray[counter][c1].charAt(posTemp2)>=48) && (refArray[counter][c1].charAt(posTemp2)<=57)))       //an integer
                    posTemp2++;
                
                operator = refArray[counter][c1].substring(posTemp1+1, posTemp2);
                value = refArray[counter][c1].substring(posTemp2, posClobrack2);
                
                posClobrack2++;
                
                newArray[tempCounter1][0] = set;
                newArray[tempCounter1][1] = sub;
                newArray[tempCounter1][2] = value;
                newArray[tempCounter1][3] = operator;
                tempCounter1++;
                
  
                //position of content afterwards
                while((!flag) && (posClobrack2<len))
                {
            
                    if(refArray[counter][c1].charAt(posClobrack2)=='m')
                    {
      
                        posOpbrack1 = refArray[counter][c1].indexOf("(", posClobrack2);
                        posClobrack1 = refArray[counter][c1].indexOf(")", posOpbrack1);
                        set = refArray[counter][c1].substring(posOpbrack1+1, posClobrack1);


                        posOpbrack2 = refArray[counter][c1].indexOf("(", posClobrack1);
                        posClobrack2 = refArray[counter][c1].indexOf(")", posOpbrack2);
                        sub = refArray[counter][c1].substring(posOpbrack2+1, posClobrack2);

                        pos1 = refArray[counter][c1].indexOf(";", posClobrack2);
                        pos2 = refArray[counter][c1].indexOf("m", posClobrack2);
                        pos3 = refArray[counter][c1].indexOf("e", posClobrack2);
                        pos4 = Math.min(pos1,pos2);
                        if(pos4==(-1))
                            pos4 = Math.max(pos1, pos2);
                        
                        fpos = Math.min(pos4,pos3);
                        if(fpos==(-1))
                        {
                            fpos = Math.max(pos4, pos3);
                            if(fpos!=(-1))
                            {
                                value = refArray[counter][c1].substring(posClobrack2+2, fpos);
                                posClobrack2 = fpos;                                    //if there again exists a term in the same line
                            }
                            else
                            {
                                flag=true;
                                fpos = len;
                                value = refArray[counter][c1].substring(posClobrack2+2, fpos);

                            }
                        }
                        else
                        {
                            value = refArray[counter][c1].substring(posClobrack2+2, fpos);
                            posClobrack2 = fpos;                                    //if there again exists a term in the same line

                        }
                        
                        newArray[tempCounter1][0] = set;
                        newArray[tempCounter1][1] = sub;
                        newArray[tempCounter1][2] = value;
                        
                        tempCounter1++;
                    }
                    else if(refArray[counter][c1].charAt(posClobrack2)==';')
                    {
                        
                        newArray[tempCounter1][0]="end";
                        tempCounter1++;
                        
                        flag=true;
                        ifFlag=false;
                    }
                    else if(refArray[counter][c1].charAt(posClobrack2)=='e')
                    {
                        if(((posClobrack2+6)<len) && (refArray[counter][c1].substring(posClobrack2, posClobrack2+6).equals("elseif")))
                        {
                            posOpbrack2 = refArray[counter][c1].indexOf("(", posClobrack2);                           //position of else if(
                            posOpbrack1 = refArray[counter][c1].indexOf("(", posOpbrack2+1);            //position of m(
                            posClobrack1 = refArray[counter][c1].indexOf(")", posOpbrack1);
                            set = refArray[counter][c1].substring(posOpbrack1+1, posClobrack1);


                            posOpbrack2 = refArray[counter][c1].indexOf("(", posClobrack1);
                            posClobrack2 = refArray[counter][c1].indexOf(")", posOpbrack2);
                            sub = refArray[counter][c1].substring(posOpbrack2+1, posClobrack2);
                        
                        
                            posTemp1 = posClobrack2;                                            //position of m()( ")" == 0.3
                            posClobrack2 = refArray[counter][c1].indexOf(")", posTemp1+1);      //position of if( ")"
                            posTemp2 = posTemp1+2;

                            if(!((refArray[counter][c1].charAt(posTemp2)>=48) && (refArray[counter][c1].charAt(posTemp2)<=57)))       //an integer
                                posTemp2++;

                            operator = refArray[counter][c1].substring(posTemp1+1, posTemp2);
                            value = refArray[counter][c1].substring(posTemp2, posClobrack2);
                        

                            posClobrack2 = posClobrack2 + 1;
                            
                            newArray[tempCounter1][0] = set;
                            newArray[tempCounter1][1] = sub;
                            newArray[tempCounter1][2] = value;
                            newArray[tempCounter1][3] = operator;
                            tempCounter1++;
                         
                        }
                        else
                        {
                            posClobrack2 = posClobrack2 + 4;                    //to check after else
                        
                            newArray[tempCounter1][0] = "else";
                            tempCounter1++;
                        }
                    }
                    else
                    {
                        flag=true;                                              //nothing in the same line
                    }
                }
            }
            else if(refArray[counter][c1].startsWith("elseif"))
            {
                len = refArray[counter][c1].length();
             
                //position of the condition in IF
                posOpbrack2 = refArray[counter][c1].indexOf("(");                   //position of if(
                posOpbrack1 = refArray[counter][c1].indexOf("(", posOpbrack2+1);     //position of m(
                posClobrack1 = refArray[counter][c1].indexOf(")");
                set = refArray[counter][c1].substring(posOpbrack1+1, posClobrack1);
                
                
                posOpbrack2 = refArray[counter][c1].indexOf("(", posClobrack1);
                posClobrack2 = refArray[counter][c1].indexOf(")", posOpbrack2);
                sub = refArray[counter][c1].substring(posOpbrack2+1, posClobrack2);
             

                posTemp1 = posClobrack2;                                            //position of m()( ")" == 0.3
                posClobrack2 = refArray[counter][c1].indexOf(")", posTemp1+1);      //position of if( ")"
                posTemp2 = posTemp1+2;
                
                if(!((refArray[counter][c1].charAt(posTemp2)>=48) && (refArray[counter][c1].charAt(posTemp2)<=57)))       //an integer
                    posTemp2++;
                
                operator = refArray[counter][c1].substring(posTemp1+1, posTemp2);
                value = refArray[counter][c1].substring(posTemp2, posClobrack2);

                
                newArray[tempCounter1][0] = set;
                newArray[tempCounter1][1] = sub;
                newArray[tempCounter1][2] = value;
                newArray[tempCounter1][3] = operator;
                tempCounter1++;
                
                posClobrack2++;

                while((!flag) && (posClobrack2<len))
                {

                    if(refArray[counter][c1].charAt(posClobrack2)=='m')
                    {

                        posOpbrack1 = refArray[counter][c1].indexOf("(", posClobrack2);
                        posClobrack1 = refArray[counter][c1].indexOf(")", posOpbrack1);
                        set = refArray[counter][c1].substring(posOpbrack1+1, posClobrack1);


                        posOpbrack2 = refArray[counter][c1].indexOf("(", posClobrack1);
                        posClobrack2 = refArray[counter][c1].indexOf(")", posOpbrack2);
                        sub = refArray[counter][c1].substring(posOpbrack2+1, posClobrack2);

                        pos1 = refArray[counter][c1].indexOf(";", posClobrack2);
                        pos2 = refArray[counter][c1].indexOf("m", posClobrack2);
                        pos3 = refArray[counter][c1].indexOf("e", posClobrack2);
                        pos4 = Math.min(pos1,pos2);
                        if(pos4==(-1))
                            pos4 = Math.max(pos1, pos2);
                        
                        fpos = Math.min(pos4,pos3);
                        if(fpos==(-1))
                        {
                            fpos = Math.max(pos4, pos3);
                            if(fpos!=(-1))
                            {
                                value = refArray[counter][c1].substring(posClobrack2+2, fpos);
             
                                posClobrack2 = fpos;                                    //if there again exists a term in the same line
                            }
                            else
                            {
                                flag=true;
                                fpos = len;
                                value = refArray[counter][c1].substring(posClobrack2+2, fpos);

                            }
                        }
                        else
                        {
                            value = refArray[counter][c1].substring(posClobrack2+2, fpos);
             
                            posClobrack2 = fpos;                                    //if there again exists a term in the same line

                        }
                        
                        newArray[tempCounter1][0] = set;
                        newArray[tempCounter1][1] = sub;
                        newArray[tempCounter1][2] = value;
                        tempCounter1++;

                    }
                    else if(refArray[counter][c1].charAt(posClobrack2)==';')
                    {
                        newArray[tempCounter1][0]="end";
                        tempCounter1++;
             
                        flag=true;
                        ifFlag=false;
                    }
                    else if(refArray[counter][c1].charAt(posClobrack2)=='e')
                    {
                        if(((posClobrack2+6)<len) && (refArray[counter][c1].substring(posClobrack2, posClobrack2+6).equals("elseif")))
                        {                     
                            posOpbrack2 = refArray[counter][c1].indexOf("(", posClobrack2);                           //position of else if(
                            posOpbrack1 = refArray[counter][c1].indexOf("(", posOpbrack2+1);            //position of m(
                            posClobrack1 = refArray[counter][c1].indexOf(")", posOpbrack1);
                            set = refArray[counter][c1].substring(posOpbrack1+1, posClobrack1);


                            posOpbrack2 = refArray[counter][c1].indexOf("(", posClobrack1);
                            posClobrack2 = refArray[counter][c1].indexOf(")", posOpbrack2);
                            sub = refArray[counter][c1].substring(posOpbrack2+1, posClobrack2);
             
                        
                            posTemp1 = posClobrack2;                                            //position of m()( ")" == 0.3
                            posClobrack2 = refArray[counter][c1].indexOf(")", posTemp1+1);      //position of if( ")"
                            posTemp2 = posTemp1+2;

                            if(!((refArray[counter][c1].charAt(posTemp2)>=48) && (refArray[counter][c1].charAt(posTemp2)<=57)))       //an integer
                                posTemp2++;

                            operator = refArray[counter][c1].substring(posTemp1+1, posTemp2);
                            value = refArray[counter][c1].substring(posTemp2, posClobrack2);
             

                            newArray[tempCounter1][0] = set;
                            newArray[tempCounter1][1] = sub;
                            newArray[tempCounter1][2] = value;
                            newArray[tempCounter1][3] = operator;
                            tempCounter1++;
                            
                            posClobrack2 = posClobrack2 + 1;
                        }
                        else
                        {
                            posClobrack2 = posClobrack2 + 4;                    //to check after else
             
                        }
                    }
                    else
                    {
                        flag=true;                                              //nothing in the same line
                    }
                }
            }
            else if(refArray[counter][c1].startsWith("else"))
            {
                newArray[tempCounter1][0] = "else";
                tempCounter1++;
             
                len = refArray[counter][c1].length();
                posClobrack2 = 4;
                while((!flag) && (posClobrack2<len))
                {
                    if(refArray[counter][c1].charAt(posClobrack2)=='m')
                    {
                        posOpbrack1 = refArray[counter][c1].indexOf("(", posClobrack2);
                        posClobrack1 = refArray[counter][c1].indexOf(")", posOpbrack1);
                        set = refArray[counter][c1].substring(posOpbrack1+1, posClobrack1);


                        posOpbrack2 = refArray[counter][c1].indexOf("(", posClobrack1);
                        posClobrack2 = refArray[counter][c1].indexOf(")", posOpbrack2);
                        sub = refArray[counter][c1].substring(posOpbrack2+1, posClobrack2);
                     

                        pos1 = refArray[counter][c1].indexOf(";", posClobrack2);
                        pos2 = refArray[counter][c1].indexOf("m", posClobrack2);
                        pos3 = refArray[counter][c1].indexOf("e", posClobrack2);
                        pos4 = Math.min(pos1,pos2);
                        if(pos4==(-1))
                            pos4 = Math.max(pos1, pos2);
                         
                        fpos = Math.min(pos4,pos3);
                        if(fpos==(-1))
                        {
                            fpos = Math.max(pos4, pos3);
                            if(fpos!=(-1))
                            {
                                value = refArray[counter][c1].substring(posClobrack2+2, fpos);
             
                                posClobrack2 = fpos;                                    //if there again exists a term in the same line
                            }
                            else
                            {
                                flag=true;
                                fpos = len;
                                value = refArray[counter][c1].substring(posClobrack2+2, fpos);

                            }
                        }
                        else
                        {
                            value = refArray[counter][c1].substring(posClobrack2+2, fpos);
             
                            posClobrack2 = fpos;                                    //if there again exists a term in the same line

                        }
                        
                        newArray[tempCounter1][0] = set;
                        newArray[tempCounter1][1] = sub;
                        newArray[tempCounter1][2] = value;
                        
                        tempCounter1++;
                        
                    }
                    else if(refArray[counter][c1].charAt(posClobrack2)==';')
                    {
                        
                        newArray[tempCounter1][0]="end";
                        tempCounter1++;
             
                        flag=true;
                        ifFlag=false;
                    }
                    else
                    {
                        flag=true;                                              //nothing in the same line
                    }
                }
            }
            else
            {
                //no action to be performed
                
            }
        }
        String abc="";
                for(int i=0; i<tempCounter1; i++)
                {
                    abc = abc+newArray[i][0];
                    abc = abc+"\t"+newArray[i][1];
                    abc = abc+"\t"+newArray[i][2];
                    abc = abc+"\t"+newArray[i][3]+"\n";
                }
               temp = abc;
         //System.out.println(temp);
         return newArray;
    }   
        
        
    private int fnOptimization(int tempCounter, int counter)
    {
        int matchFlag=0;
        int c1=0, c2=0;
        for(c1=0; c1<tempCounter; c1++)
        {
            if(tempArray1[c1][3]!=null)
            {
                for(c2=0; c2<counter; c2++)
                {
                    if(tempArray1[c1][0].equals(finalArray[c2][0]))            //set matches
                    {
                        if(tempArray1[c1][1].equals(finalArray[c2][1]))        //subject matches
                        {
                            String operator = tempArray1[c1][3];
                            float valueTempArray = Float.parseFloat(tempArray1[c1][2]);
                            float valueFinalArray = Float.parseFloat(finalArray[c2][2]);
                            if(operator.equals("<"))
                            {
                                if(valueFinalArray < valueTempArray)
                                    matchFlag = 1;
                            }
                            else if(operator.equals("<="))
                            {
                               
                                if(valueFinalArray <= valueTempArray)
                                {
                                    matchFlag = 1;
                                   
                                }
                            }
                            else if(operator.equals(">"))
                            {
                                if(valueFinalArray > valueTempArray)
                                    matchFlag = 1;
                            }
                            else if(operator.equals(">="))
                            {
                                if(valueFinalArray >= valueTempArray)
                                    matchFlag = 1;
                            }
                            else if(operator.equals("=="))
                            {
                                if(valueFinalArray == valueTempArray)
                                    matchFlag = 1;
                            }
                            else if(operator.equals("<="))
                            {
                                if(valueFinalArray <= valueTempArray)
                                    matchFlag = 1;
                            }
                            else if(operator.equals("!="))
                            {
                                if(valueFinalArray != valueTempArray)
                                    matchFlag = 1;
                            }
                        }
                    }
                }
            }
            else if(tempArray1[c1][0].equals("else"))
            {
                matchFlag=1;
            }
            
            if(matchFlag==1)
            {
                c1++; 
                for(; c1<tempCounter; c1++)
                {
                    if(!(tempArray1[c1][3]!=null) && !(tempArray1[c1][0].equals("else")))
                    {
                        finalArray[counter] = tempArray1[c1];
                        
                        counter++;
                    }
                    else
                    {
                        break;
                    }
                }
                break;
            }
        }
        return counter;
        
    }
    
    
    private int codeOptimizer(String [][] array)
    {
        int counter=0;
        int tempCounter=0;                                                  //for tempArray
        int counterForFinalArray=0;
       
        
        for(counter=0; counter<tempCounter1; counter++)                     //tempCounter1 is counter of ICG
        {
            if(array[counter][3]==null)
            {
              
                finalArray[counterForFinalArray] = array[counter];
                counterForFinalArray++;
            }
            else if(array[counter][3]!=null)
            {
                tempCounter=0;
                while(!(array[counter][0].equals("end")))
                {
                    tempArray1[tempCounter] = array[counter];
                    
                    counter++;
                    tempCounter++;
                }
                
                counterForFinalArray = fnOptimization(tempCounter, counterForFinalArray);
            }
        }
        String temp = "";
        for(int c1=0; c1<counterForFinalArray; c1++)
        {
            temp = temp + finalArray[c1][0]+finalArray[c1][1]+finalArray[c1][2]+"\n";
        }
        
        //System.out.println(temp);
        tempCounter1=0;
        return counterForFinalArray;
    }
    
    
    private int groupArrayOfStrings(String[][] inputArray,int lengthOfInputArray ,String[][] outputArray, int pos, String[][] uniqueResults)//pos = 0 for set,1 for subject
    {   
            int count = 0;
            int uniqueResultsCount=0;
            int lengthOfCopy = lengthOfInputArray;
            String[][] inputCopy = new String [100][3];
            for(int c1=0;c1<lengthOfInputArray;c1++)
            {
                inputCopy[c1][0]=inputArray[c1][0];
                inputCopy[c1][1]=inputArray[c1][1];
                inputCopy[c1][2]=inputArray[c1][2];
            }
            while(lengthOfCopy != 0)
            {
                String currentString = inputCopy[0][pos];
                int beginCount = count;
                int c2;
                outputArray[count][0]= inputCopy[0][0];
                outputArray[count][1]= inputCopy[0][1];
                outputArray[count][2]= inputCopy[0][2];
                count++;
                for (c2=0;c2<lengthOfCopy-1;c2++)
                {
                    inputCopy[c2][0]= inputCopy[c2+1][0];
                    inputCopy[c2][1]= inputCopy[c2+1][1];
                    inputCopy[c2][2]= inputCopy[c2+1][2];
                }
                inputCopy[c2][0]=null;
                inputCopy[c2][1]=null;
                inputCopy[c2][2]=null;
                lengthOfCopy--;
                for(int c1=0;c1<lengthOfCopy;c1++)
                    if (inputCopy[c1][pos].equals(currentString))
                    {
                        outputArray[count][0]= inputCopy[c1][0];
                        outputArray[count][1]= inputCopy[c1][1];
                        outputArray[count][2]= inputCopy[c1][2];
                        count++;
                        //remove from input copy
                        for (c2=c1;c2<lengthOfCopy-1;c2++)
                            {
                            inputCopy[c2][0]= inputCopy[c2+1][0];
                            inputCopy[c2][1]= inputCopy[c2+1][1];
                            inputCopy[c2][2]= inputCopy[c2+1][2];
                            }
                        inputCopy[c2][0]=null;
                        inputCopy[c2][1]=null;
                        inputCopy[c2][2]=null;
                        c1--;
                        lengthOfCopy--;
                    }
                int noOfSimilarResults = count-beginCount;
                uniqueResults[uniqueResultsCount][0]=currentString;
                uniqueResults[uniqueResultsCount][1]=Integer.toString(noOfSimilarResults);
                uniqueResultsCount++;
            }
        return uniqueResultsCount;
        }
    private String getDescriptor(float value)
    {
        //WORKING - System.out.println(value);
        String descriptor = "";
        String[][] qualifiers = new String[6][2];//5 = no of intervals .. 2 words for each interval
        int[] numberOfDescriptors = new int[6];
        qualifiers[0][0]="not"; // 0-0.1
        qualifiers[0][1]="hardly";
        qualifiers[1][0]="slightly";//0.1-0.3
        qualifiers[1][1]="mildly";
        qualifiers[2][0]="somewhat";//0.3-0.4
        qualifiers[2][1]="";//add averagely,moderately
        qualifiers[3][0]="quiet";//0.4-0.6
        qualifiers[3][1]="fairly";
        qualifiers[4][0]="very";//0.6-0.85
        qualifiers[4][1]="really";
        qualifiers[5][0]="extremely";//0.85-1.0
        qualifiers[5][1]="immensely";
        numberOfDescriptors[0]=2;
        numberOfDescriptors[1]=1;
        numberOfDescriptors[2]=1;
        numberOfDescriptors[3]=2;
        numberOfDescriptors[4]=2;
        numberOfDescriptors[5]=2;
        
        if (value>=Float.parseFloat("0") && value <= Float.parseFloat("0.1"))
            {
                int no =(int) Math.floor((Math.random()*numberOfDescriptors[0]));
                if (no == numberOfDescriptors[0])
                        no--;
                descriptor = qualifiers[0][no];
            }
            else if (value>=Float.parseFloat("0.1") && value <= Float.parseFloat("0.3"))
            {
                int no =(int) Math.floor((Math.random()*numberOfDescriptors[1]));
                if (no == numberOfDescriptors[1])
                        no--;
                descriptor = qualifiers[1][no];
            }
            else if (value>=Float.parseFloat("0.3") && value <= Float.parseFloat("0.4"))
            {
                int no =(int) Math.floor((Math.random()*numberOfDescriptors[2]));
                if (no == numberOfDescriptors[2])
                        no--;
                descriptor = qualifiers[2][no];
            }
            else if (value>=Float.parseFloat("0.4") && value <= Float.parseFloat("0.6"))
            {
                int no =(int) Math.floor((Math.random()*numberOfDescriptors[3]));
                if (no == numberOfDescriptors[3])
                        no--;
                descriptor = qualifiers[3][no];
            }
            else if (value>=Float.parseFloat("0.6") && value <= Float.parseFloat("0.85"))
            {
                int no =(int) Math.floor((Math.random()*numberOfDescriptors[4]));
                if (no == numberOfDescriptors[4])
                        no--;
                descriptor = qualifiers[4][no];
            }
            else if (value>=Float.parseFloat("0.85") && value <= Float.parseFloat("1"))
            {
                int no =(int) Math.floor((Math.random()*numberOfDescriptors[5]));
                if (no == numberOfDescriptors[5])
                        no--;
                descriptor = qualifiers[5][no];
            }
    return (descriptor);
    }
   private boolean similarSubjects(String [][] input,int subject1,int subject2)
    {
        int score=0;
        for (int c1=subject1;(input[c1][1].equals(input[subject1][1]));c1++)
            for (int c2=subject2;(input[c2][1].equals(input[subject2][1]));c2++)
                   if(input[c1][0].equals(input[c2][0]))
                       score++;
        if(score > 3)
            return true;
        else
            return false;
    }
    private int nextSubject(String[][] input,int lengthOfInput, int c1)
    {   
        int c2 = c1; 
        String initialSubject = input[c1][1];
        while(input[c2][1].equals(initialSubject) && c2<lengthOfInput)
            c2++;
        if (c2 == lengthOfInput)
            return -1;
        else
            return c2;
    }
    private void convertToNaturalLanguage(String[][] inputArray, int lengthOfInputArray)
    {
        //jTextArea2.setText(""); // clear the output TextArea
        String[][] inputSimilarSubject = new String[100][3];
        int noOfInputSimilarSubject=0;
        String[][] inputGroupBySubject = new String[100][3];
        String[][] uniqueResultsBySubject = new String[100][2];
        int uniqueResultsBySubjectLength = groupArrayOfStrings(inputArray,lengthOfInputArray,inputGroupBySubject,1,uniqueResultsBySubject);
        //System.out.println(uniqueResultsBySubjectLength);
         
        for (int c1=0;c1<lengthOfInputArray;c1++)     //code for simple sentences
        {
        String descriptor = getDescriptor(Float.parseFloat(inputGroupBySubject[c1][2]));
        String temp = jTextArea2.getText();    
        temp += inputGroupBySubject[c1][1] +" is "+descriptor+" "+inputGroupBySubject[c1][0]+". ";
        jTextArea2.setText(temp);
        }
        /*for (int c1=0;c1<lengthOfInputArray-1;c1++) // code for proper sentences
        {   
            int c2 = nextSubject(inputGroupBySubject,lengthOfInputArray,c1);
            for(; c2<lengthOfInputArray;c2++) // c1 & c2 are different subjects
                if(similarSubjects(inputGroupBySubject,c1,c2))
                {//put in similar array remove and repeat;
                for (int c3=0;(inputGroupBySubject[c3][1].equals(inputGroupBySubject[c1][1]));c3++)
                    {
                    
                    }
                }
        //individual sentence formation left*/
        
        
        
        /*for (int c1=0;c1<lengthOfInputArray;c1++)// testing code
            {
            String a = jTextArea2.getText();
            a += inputGroupBySet[c1][0]+"\t"+inputGroupBySet[c1][1]+"\t"+inputGroupBySubject[c1][2]+"\n";
            jTextArea2.setText(a);
            }
        for (int c1=0;c1<uniqueResultsBySetLength;c1++)
            {
            String a = jTextArea2.getText();
            a += uniqueResultsBySet[c1][0]+"\t"+uniqueResultsBySet[c1][1]+"\n";//+uniqueResultsBySet[c1][2]+"\n";
            jTextArea2.setText(a);
            }*/
    } 
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

           
           String[][] statements = new String[1000][2];
           
           
           String[][] lexicalReturn = lexicalAnalyser(statements);           //get the tokens from lexer
                                                                            //c1 is for element count of array
           
           boolean semanticError=true;
           
           int syntaxError = syntaxAnalyser(lexicalReturn);
           if(syntaxError!=1)
           {
               semanticError=semantic(statementsList,elementNo);
           }
           if(!semanticError)
           {
               intermediateLanguageOutput = intermediateCodeGenerator(statementsList);
                    
                int len = codeOptimizer(intermediateLanguageOutput);
                convertToNaturalLanguage(finalArray,len);
                
           }
           
           
           
           
    //setValues();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
    private void jTextArea1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextArea1FocusGained
        String defaultString = "Enter the statements here...";
        if (defaultString.equals(jTextArea1.getText()))
        {
            jTextArea1.setText("");
            java.awt.Font font = new java.awt.Font("Monospaced", 1, 18);
            jTextArea1.setFont(font);
            java.awt.Color color = new java.awt.Color(0, 0, 0);
            jTextArea1.setForeground(color);
        }  
    }//GEN-LAST:event_jTextArea1FocusGained

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
      /* if (!(writeSetsRelationship("filename.txt","setfile.txt")))
       {
           JOptionPane.showMessageDialog(this,"Cannot write to output file: "+"filename","Error", JOptionPane.ERROR_MESSAGE);
       }*/
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
       
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(com.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(com.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(com.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(com.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new com().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
